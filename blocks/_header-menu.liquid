
{%- doc -%}
  Renders a header menu block.

  @param {string} [variant] - What version of the menu to render. Defaults to header menu.
  @param {string} [transparent] - Show a transparent menu
{%- enddoc -%}

<!-- header-menu.liquid -->
{% comment %} 
  This partial handles the mega menu rendering for both products and collections
{% endcomment %}

<nav class="header-menu__nav" role="navigation">
  <ul class="menu-list__list list-unstyled" role="list">
    {% for link in block.settings.menu.links %}
      <li class="menu-list__list-item{% if link.links.size > 0 %} has-submenu{% endif %}">
        <a 
          href="{{ link.url }}" 
          class="menu-list__link"
          {% if link.links.size > 0 %}
            aria-expanded="false"
            aria-controls="submenu-{{ link.handle }}"
            data-menu-trigger
          {% endif %}
        >
          {{ link.title }}
          {% if link.links.size > 0 %}
            <span class="menu-list__chevron">^</span>
          {% endif %}
        </a>

        {% if link.links.size > 0 %}
          <div class="menu-list__submenu" id="submenu-{{ link.handle }}">
            <div class="menu-list__submenu-inner">
              {% comment %} Determine if submenu contains products or collections {% endcomment %}
              {% assign has_products = false %}
              {% assign has_collections = false %}
              {% assign submenu_products = blank %}
              {% assign submenu_collections = blank %}
              
              {% for child_link in link.links %}
                {% if child_link.type == 'product_link' %}
                  {% assign has_products = true %}
                  {% assign submenu_products = submenu_products | append: child_link.object.id | append: ',' %}
                {% elsif child_link.type == 'collection_link' %}
                  {% assign has_collections = true %}
                  {% assign submenu_collections = submenu_collections | append: child_link.handle | append: ',' %}
                {% endif %}
              {% endfor %}

              {% if has_products %}
                {% comment %} Render product cards grid {% endcomment %}
                <div class="mega-menu__grid mega-menu__grid--products">
                  <div class="mega-menu__content-list mega-menu__content-list--products">
                    {% for child_link in link.links %}
                      {% if child_link.type == 'product_link' %}
                        {% assign product = child_link.object %}
                        <div class="mega-menu__content-list-item mega-menu__content-list-item--product">
                          <a href="{{ product.url }}" class="product-card">
                            {% if product.featured_image %}
                              <div class="product-card__image-wrapper">
                                {% if product.compare_at_price > product.price %}
                                  <span class="product-card__badge">Sale</span>
                                {% endif %}
                                <img 
                                  src="{{ product.featured_image | img_url: '300x300' }}" 
                                  alt="{{ product.title | escape }}"
                                  class="product-card__image"
                                  loading="lazy"
                                  width="300"
                                  height="300"
                                >
                              </div>
                            {% endif %}
                            <div class="product-card__info">
                              <h3 class="product-card__title">{{ product.title }}</h3>
                              <div class="product-card__price">
                                {% if product.compare_at_price > product.price %}
                                  <span class="product-card__price--sale">From {{ product.price | money }}</span>
                                  <span class="product-card__price--compare">{{ product.compare_at_price | money }}</span>
                                {% else %}
                                  <span>From {{ product.price | money }}</span>
                                {% endif %}
                              </div>
                            </div>
                          </a>
                        </div>
                      {% endif %}
                    {% endfor %}
                  </div>
                </div>
              {% elsif has_collections %}
                {% comment %} Render collections mega menu {% endcomment %}
                <div class="mega-menu__grid mega-menu__grid--collections">
                  {% for child_link in link.links %}
                    {% if child_link.type == 'collection_link' %}
                      {% assign collection = child_link.object %}
                      <div class="mega-menu__column">
                        <div class="mega-menu__column-header">
                          <a href="{{ collection.url }}" class="mega-menu__link mega-menu__link--parent">
                            {{ collection.title }}
                          </a>
                        </div>
                        <ul class="mega-menu__column-list">
                          {% for product in collection.products limit: 4 %}
                            <li>
                              <a href="{{ product.url }}" class="mega-menu__link">
                                {{ product.title }}
                              </a>
                            </li>
                          {% endfor %}
                          {% if collection.products_count > 4 %}
                            <li>
                              <a href="{{ collection.url }}" class="mega-menu__link mega-menu__link--view-all">
                                View all â†’
                              </a>
                            </li>
                          {% endif %}
                        </ul>
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>
              {% else %}
                {% comment %} Default menu structure for mixed or other link types {% endcomment %}
                <div class="mega-menu__grid">
                  <div class="mega-menu__column">
                    <ul class="mega-menu__column-list">
                      {% for child_link in link.links %}
                        <li>
                          <a href="{{ child_link.url }}" class="mega-menu__link">
                            {{ child_link.title }}
                          </a>
                        </li>
                      {% endfor %}
                    </ul>
                  </div>
                </div>
              {% endif %}
            </div>
          </div>
        {% endif %}
      </li>
    {% endfor %}
  </ul>
</nav>

<style>
/* Product Cards Grid Styles */
.mega-menu__grid--products {
  padding: var(--padding-xl) 0;
}

.mega-menu__content-list--products {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: var(--gap-md);
  max-width: 1200px;
  margin: 0 auto;
}

.product-card {
  display: block;
  text-decoration: none;
  color: inherit;
  background: var(--color-background);
  border-radius: var(--menu-image-border-radius, 0);
  overflow: hidden;
  transition: transform 0.2s ease;
}

.product-card:hover {
  transform: translateY(-2px);
}

.product-card__image-wrapper {
  position: relative;
  aspect-ratio: 1 / 1;
  background: #f5f5f5;
  overflow: hidden;
}

.product-card__badge {
  position: absolute;
  top: 8px;
  left: 8px;
  background: #e74c3c;
  color: white;
  padding: 4px 8px;
  font-size: 11px;
  font-weight: 600;
  text-transform: uppercase;
  z-index: 1;
  border-radius: 2px;
}

.product-card__image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.product-card__info {
  padding: var(--padding-sm);
  text-align: center;
}

.product-card__title {
  font-size: var(--font-size--small);
  font-weight: 400;
  margin: 0 0 var(--margin-xs) 0;
  line-height: 1.3;
  text-transform: var(--title-case);
}

.product-card__price {
  font-size: var(--font-size--small);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.product-card__price--sale {
  font-weight: 600;
}

.product-card__price--compare {
  text-decoration: line-through;
  opacity: 0.6;
  font-size: var(--font-size--xsmall);
}

/* Collections Mega Menu Styles */
.mega-menu__grid--collections {
  display: flex;
  gap: var(--gap-xl);
  padding: var(--padding-xl) 0;
  flex-wrap: wrap;
}

.mega-menu__grid--collections .mega-menu__column {
  flex: 0 0 auto;
  min-width: 180px;
}

.mega-menu__column-header {
  margin-bottom: var(--margin-md);
  padding-bottom: var(--padding-xs);
  border-bottom: 1px solid rgba(var(--color-foreground-rgb), 0.1);
}

.mega-menu__column-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

.mega-menu__column-list li {
  margin-bottom: var(--margin-xs);
}

.mega-menu__link--parent {
  font-weight: 600;
  font-size: var(--menu-parent-font-size);
  text-transform: var(--menu-parent-font-case);
}

.mega-menu__link--view-all {
  font-style: italic;
  opacity: 0.8;
  font-size: var(--font-size--small);
  margin-top: var(--margin-sm);
  display: inline-block;
}

/* Responsive adjustments */
@media screen and (max-width: 989px) {
  .mega-menu__content-list--products {
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: var(--gap-sm);
  }
  
  .mega-menu__grid--collections {
    flex-direction: column;
    gap: var(--gap-md);
  }
  
  .mega-menu__grid--collections .mega-menu__column {
    width: 100%;
  }
}

@media screen and (max-width: 749px) {
  .mega-menu__content-list--products {
    grid-template-columns: repeat(2, 1fr);
  }
}
</style>

{% schema %}
{
  "name": "t:names.menu",
  "tag": null,
  "settings": [
    {
      "type": "link_list",
      "id": "menu",
      "label": "t:settings.menu",
      "default": "main-menu"
    },
    {
      "type": "select",
      "id": "menu_style",
      "label": "t:settings.style",
      "options": [
        {
          "value": "text",
          "label": "t:options.text_only"
        },
        {
          "value": "collection_images",
          "label": "t:options.collection_images"
        },
        {
          "value": "featured_products",
          "label": "t:options.featured_products"
        },
        {
          "value": "featured_collections",
          "label": "t:options.featured_collections"
        }
      ],
      "default": "collection_images"
    },
    {
      "type": "select",
      "id": "featured_products_aspect_ratio",
      "label": "t:settings.image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:options.auto"
        },
        {
          "value": "4 / 5",
          "label": "t:options.portrait"
        },
        {
          "value": "1 / 1",
          "label": "t:options.square"
        }
      ],
      "default": "4 / 5",
      "visible_if": "{{ block.settings.menu_style == 'featured_products' }}"
    },
    {
      "type": "select",
      "id": "featured_collections_aspect_ratio",
      "label": "t:settings.image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:options.auto"
        },
        {
          "value": "16 / 9",
          "label": "t:options.landscape"
        },
        {
          "value": "1 / 1",
          "label": "t:options.square"
        }
      ],
      "default": "16 / 9",
      "visible_if": "{{ block.settings.menu_style == 'featured_collections' }}"
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "label": "t:settings.image_border_radius",
      "min": 0,
      "max": 32,
      "step": 1,
      "unit": "px",
      "default": 0,
      "visible_if": "{{ block.settings.menu_style != 'text' }}"
    },
    {
      "type": "select",
      "id": "product_title_case",
      "label": "t:settings.product_title_case",
      "options": [
        {
          "value": "default",
          "label": "t:options.default"
        },
        {
          "value": "uppercase",
          "label": "t:options.uppercase"
        }
      ],
      "default": "default",
      "visible_if": "{{ block.settings.menu_style == 'featured_products' }}"
    },
    {
      "type": "select",
      "id": "collection_title_case",
      "label": "t:settings.collection_title_case",
      "options": [
        {
          "value": "default",
          "label": "t:options.default"
        },
        {
          "value": "uppercase",
          "label": "t:options.uppercase"
        }
      ],
      "default": "default",
      "visible_if": "{{ block.settings.menu_style == 'featured_collections' or block.settings.menu_style == 'collection_images' }}"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "primary"
    },
    {
      "type": "select",
      "id": "menu_font_style",
      "label": "t:settings.text_hierarchy",
      "options": [
        {
          "value": "regular",
          "label": "t:options.classic"
        },
        {
          "value": "inverse",
          "label": "t:options.inverse"
        },
        {
          "value": "inverse_large",
          "label": "t:options.inverse_large"
        }
      ],
      "default": "inverse"
    },
    {
      "type": "header",
      "content": "t:content.typography_primary"
    },
    {
      "type": "select",
      "id": "type_font_primary_link",
      "label": "t:settings.font",
      "options": [
        {
          "value": "body",
          "label": "t:options.body"
        },
        {
          "value": "subheading",
          "label": "t:options.subheading"
        },
        {
          "value": "heading",
          "label": "t:options.heading"
        },
        {
          "value": "accent",
          "label": "t:options.accent"
        }
      ],
      "default": "heading"
    },
    {
      "type": "select",
      "id": "type_font_primary_size",
      "label": "t:settings.size",
      "options": [
        {
          "value": "0.625rem",
          "label": "10px"
        },
        {
          "value": "0.75rem",
          "label": "12px"
        },
        {
          "value": "0.875rem",
          "label": "14px"
        },
        {
          "value": "1rem",
          "label": "16px"
        },
        {
          "value": "1.125rem",
          "label": "18px"
        },
        {
          "value": "1.25rem",
          "label": "20px"
        },
        {
          "value": "1.5rem",
          "label": "24px"
        },
        {
          "value": "2rem",
          "label": "32px"
        },
        {
          "value": "2.5rem",
          "label": "40px"
        },
        {
          "value": "3rem",
          "label": "48px"
        },
        {
          "value": "3.5rem",
          "label": "56px"
        },
        {
          "value": "4.5rem",
          "label": "72px"
        },
        {
          "value": "5.5rem",
          "label": "88px"
        },
        {
          "value": "7.5rem",
          "label": "120px"
        },
        {
          "value": "9.5rem",
          "label": "152px"
        },
        {
          "value": "11.5rem",
          "label": "184px"
        }
      ],
      "default": "1rem"
    },
    {
      "type": "select",
      "id": "type_case_primary_link",
      "label": "t:settings.text_case",
      "options": [
        {
          "value": "none",
          "label": "t:options.default"
        },
        {
          "value": "uppercase",
          "label": "t:options.uppercase"
        }
      ],
      "default": "none"
    },
    {
      "type": "header",
      "content": "t:content.typography_secondary"
    },
    {
      "type": "select",
      "id": "type_font_secondary_link",
      "label": "t:settings.font",
      "options": [
        {
          "value": "body",
          "label": "t:options.body"
        },
        {
          "value": "subheading",
          "label": "t:options.subheading"
        },
        {
          "value": "heading",
          "label": "t:options.heading"
        },
        {
          "value": "accent",
          "label": "t:options.accent"
        }
      ],
      "default": "subheading"
    },
    {
      "type": "select",
      "id": "type_case_secondary_link",
      "label": "t:settings.text_case",
      "options": [
        {
          "value": "none",
          "label": "t:options.default"
        },
        {
          "value": "uppercase",
          "label": "t:options.uppercase"
        }
      ],
      "default": "none"
    },
    {
      "type": "header",
      "content": "t:content.typography_tertiary"
    },
    {
      "type": "select",
      "id": "type_font_tertiary_link",
      "label": "t:settings.font",
      "options": [
        {
          "value": "body",
          "label": "t:options.body"
        },
        {
          "value": "subheading",
          "label": "t:options.subheading"
        },
        {
          "value": "heading",
          "label": "t:options.heading"
        },
        {
          "value": "accent",
          "label": "t:options.accent"
        }
      ],
      "default": "body"
    },
    {
      "type": "select",
      "id": "type_case_tertiary_link",
      "label": "t:settings.text_case",
      "options": [
        {
          "value": "none",
          "label": "t:options.default"
        },
        {
          "value": "uppercase",
          "label": "t:options.uppercase"
        }
      ],
      "default": "none"
    },
    {
      "type": "header",
      "content": "t:content.mobile_layout"
    },
    {
      "type": "checkbox",
      "id": "navigation_bar",
      "label": "t:settings.navigation_bar"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme_navigation_bar",
      "label": "t:settings.navigation_bar_color_scheme",
      "default": "primary",
      "visible_if": "{{ block.settings.navigation_bar }}"
    },
    {
      "type": "checkbox",
      "id": "drawer_accordion",
      "label": "t:settings.accordion",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "drawer_accordion_expand_first",
      "label": "t:settings.expand_first_group",
      "default": false,
      "visible_if": "{{ block.settings.drawer_accordion == true }}"
    },
    {
      "type": "checkbox",
      "id": "drawer_dividers",
      "label": "t:settings.dividers",
      "default": false
    }
  ]
}
{% endschema %}
