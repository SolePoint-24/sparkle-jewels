{%- comment %}
 ============================================================================
  STONE CONFIGURATION ACCORDION
  - This code first finds all unique stone types.
  - Then, it loops through those unique types to create an accordion.
  - Inside each accordion panel, it loops through the configurations again
    to show only the stones that match the current type.
 ============================================================================
{% endcomment %}

{%- assign stone_configurations = product.metafields.custom.stone_configuration.value -%}

{%- if stone_configurations.count > 0 -%}

  {%- comment %}
    Step 1: Create an array of unique stone types.
    We build a string of types, separated by commas, then split it into an array.
    This prevents duplicate types like "Diamond, Diamond, Sapphire" and gives us "Diamond, Sapphire".
  {%- endcomment -%}
  {%- assign unique_types_string = '' -%}
  {%- for config_item in stone_configurations -%}
    {%- assign current_type = config_item.stone.value.type -%}
    {%- unless unique_types_string contains current_type -%}
      {%- capture unique_types_string -%}{{ unique_types_string }}{{ current_type }}|{%- endcapture -%}
    {%- endunless -%}
  {%- endfor -%}
  {%- assign unique_types = unique_types_string | split: '|' | compact -%}

  {%- comment %}
    Step 2: Build the accordion.
    Loop through the unique types array we just created. Each 'type' will be an accordion header.
  {%- endcomment -%}
  <div class="stone-accordion">
    {%- for type in unique_types -%}
      <details class="accordion-item" open>
        <summary class="accordion-header">
          {{ type | capitalize }} Details
        </summary>
        <div class="accordion-content">
          {%- comment %}
            Inner Loop: Now, go through the original list again.
            Only display the stones where the type matches the current accordion header's type.
          {%- endcomment -%}
          {%- for config_item in stone_configurations -%}
            {%- if config_item.stone.value.type == type -%}
              {%- assign stone = config_item.stone.value -%}

              <div class="stone-info-wrapper">
                <table class="stone-info-table">
                  <tbody>
                    <tr>
                      <td>No. Of {{ stone.shape }} {{ stone.type }}</td>
                      <td>{{ config_item.number_of_stone }}</td>
                    </tr>
                    <tr>
                      <td>Quality Grade</td>
                      <td>{{ stone.quality_grade }}</td>
                    </tr>
                    <tr>
                      <td>Total Weight (ct. tw.)</td>
                      <td>{{ config_item.weight_carat }}</td>
                    </tr>
                    <tr>
                      <td>Stone Size (mm)</td>
                      <td>{{ config_item.stone_size }}</td>
                    </tr>
                    <tr>
                      <td>Colour Clarity</td>
                      <td>{{ stone.quality_grade }}</td>
                    </tr>
                    <tr>
                      <td>Setting Type</td>
                      <td>{{ config_item.setting_type }}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            {%- endif -%}
          {%- endfor -%}
        </div>
      </details>
    {%- endfor -%}
  </div>
{%- endif -%}

{% stylesheet %}
  /* Styles for the accordion structure */
  .accordion-item {
    border: 1px solid #e9e9e9;
    border-radius: 4px;
    margin-bottom: 10px;
    overflow: hidden;
  }
  .accordion-header {
    padding: 10px 15px;
    background-color: #f5f5f5;
    cursor: pointer;
    font-weight: 600;
    letter-spacing: 0.05em;
    font-size: 1.1em;
    list-style: none; /* Removes the default marker */
  }
  .accordion-header::-webkit-details-marker {
    display: none; /* Hides the default arrow in Chrome/Safari */
  }
  .accordion-content {
    padding: 15px;
  }
  .accordion-item[open] .accordion-header {
    border-bottom: 1px solid #e9e9e9;
  }

  /* Your original table styles - slightly adjusted for the new context */
  .stone-info-wrapper {
    margin-bottom: 15px; /* Adds space between multiple tables within one accordion */
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
  }
  .stone-info-wrapper:last-child {
    margin-bottom: 0;
  }
  .stone-info-table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid #e9e9e9;
    border-radius: 4px;
    overflow: hidden;
  }
  .stone-info-table tr {
    border-bottom: 1px solid #e9e9e9;
  }
  .stone-info-table tr:last-child {
    border-bottom: none;
  }
  .stone-info-table td {
    padding: 8px 12px;
    font-size: 14px;
    color: #444;
    line-height: 20px;
  }
  .stone-info-table td:first-child {
    width: 60%;
    background-color: #fdfdfd; /* A softer background */
    font-weight: 500;
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:names.stone_configuration",
  "tag": null,
  "settings": [
    {
      "type": "liquid",
      "id": "custom_liquid",
      "label": "t:settings.custom_liquid",
      "info": "t:info.custom_liquid"
    }
  ],
  "presets": [
    {
      "name": "t:names.stone_configuration",
      "category": "t:categories.custom"
    }
  ]
}
{% endschema %}